name: Deploy to Amazon ECS

on:
  pull_request:
    branches: [ "deploy" ]
    types:
      - closed

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: playqround
  ECS_SERVICE: playqround-svc
  ECS_CLUSTER: playqround-cluster
  ECS_TASK_DEFINITION: playqround-td
  CONTAINER_NAME: playqround-app

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-20.04
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
      
    - name: Generate Environment Variables File for Production
      run: |
        echo "EMAIL_SERVICE=$EMAIL_SERVICE" >> .env
        echo "EMAIL_AUTH_USER=$EMAIL_AUTH_USER" >> .env
        echo "EMAIL_AUTH_PASSWORD=$EMAIL_AUTH_PASSWORD" >> .env
        echo "EMAIL_BASE_URL=$EMAIL_BASE_URL" >> .env
        echo "DATABASE_HOST=$DATABASE_HOST" >> .env
        echo "DATABASE_PORT=$DATABASE_PORT" >> .env
        echo "DATABASE_USER=$DATABASE_USER" >> .env
        echo "DATABASE_PASSWORD=$DATABASE_PASSWORD" >> .env
        echo "DATABASE_NAME=$DATABASE_NAME" >> .env
        echo "DATABASE_SYNCHRONIZE=$DATABASE_SYNCHRONIZE" >> .env
        echo "MONGODB_URL=$MONGODB_URL" >> .env
        echo "JWT_SECRET=$JWT_SECRET" >> .env
        echo "REDIS_URL=$REDIS_URL" >> .env
      env:
        EMAIL_SERVICE: ${{ secrets.EMAIL_SERVICE }}
        EMAIL_AUTH_USER: ${{ secrets.EMAIL_AUTH_USER }}
        EMAIL_AUTH_PASSWORD: ${{ secrets.EMAIL_AUTH_PASSWORD }}
        EMAIL_BASE_URL: ${{ secrets.EMAIL_BASE_URL }}
        DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
        DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
        DATABASE_USER: ${{ secrets.DATABASE_USER }}
        DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        DATABASE_SYNCHRONIZE: ${{ secrets.DATABASE_SYNCHRONIZE }}
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        REDIS_URL: ${{ secrets.REDIS_URL }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download Task Definition Template
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition \
          > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true